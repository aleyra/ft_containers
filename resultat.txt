➜  ft_containers git:(master) ✗ make && ./containers               
c++ -Wall -Wextra -Werror -I includes -c srcs/tester/test_vector.cpp -o objs/test_vector.o
[INFO] Compilation of test_vector
c++ -Wall -Wextra -Werror -I includes -c srcs/tester/test_map.cpp -o objs/test_map.o
In file included from srcs/tester/test_map.cpp:6:
In file included from includes/map.hpp:10:
includes/my_avl_tree.hpp:217:13: error: no viable conversion from
      'std::__1::__map_iterator<std::__1::__tree_iterator<std::__1::__value_type<int, int>,
      std::__1::__tree_node<std::__1::__value_type<int, int>, void *> *, long> >::value_type'
      (aka 'pair<const int, int>') to 'const ft::avl_tree<int, int, ft::map<int, int,
      std::__1::less<int>, std::__1::allocator<ft::pair<const int, int> > >::value_compare,
      std::__1::allocator<ft::pair<const int, int> > >::value_type' (aka 'const pair<int, int>')
                                        insert(*it);
                                               ^~~
includes/map.hpp:71:107: note: in instantiation of function template specialization 'ft::avl_tree<int,
      int, ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<const int, int> >
      >::value_compare, std::__1::allocator<ft::pair<const int, int> >
      >::avl_tree<std::__1::__map_iterator<std::__1::__tree_iterator<std::__1::__value_type<int, int>,
      std::__1::__tree_node<std::__1::__value_type<int, int>, void *> *, long> > >' requested here
  ...& comp = key_compare(), const allocator_type & alloc = allocator_type()):comp(comp), tree(first...
                                                                                          ^
srcs/tester/test_map.cpp:22:20: note: in instantiation of function template specialization 'ft::map<int,
      int, std::__1::less<int>, std::__1::allocator<ft::pair<const int, int> >
      >::map<std::__1::__map_iterator<std::__1::__tree_iterator<std::__1::__value_type<int, int>,
      std::__1::__tree_node<std::__1::__value_type<int, int>, void *> *, long> > >' requested here
        ft::map<int, int> mm(tm.begin(), tm.end(), tm.key_comp());
                          ^
includes/pair.hpp:8:9: note: candidate constructor (the implicit copy constructor) not viable: no known
      conversion from 'std::__1::__map_iterator<std::__1::__tree_iterator<std::__1::__value_type<int,
      int>, std::__1::__tree_node<std::__1::__value_type<int, int>, void *> *, long> >::value_type'
      (aka 'pair<const int, int>') to 'const ft::pair<int, int> &' for 1st argument
        struct pair{
               ^
includes/pair.hpp:20:3: note: candidate template ignored: could not match 'ft::pair' against
      'std::__1::pair'
                pair(const pair<U,V> & src):first(src.first), second(src.second){}
                ^
includes/my_avl_tree.hpp:254:35: note: passing argument to parameter 'data' here
                        void    insert(const value_type & data){
                                                          ^
includes/my_avl_tree.hpp:272:10: error: no matching function for call to object of type 'ft::map<int,
      int, std::__1::less<int>, std::__1::allocator<ft::pair<const int, int> > >::value_compare'
                                        if (comp(data.first, tmp->data.first)){//data < tmp.data
                                            ^~~~
includes/my_avl_tree.hpp:217:6: note: in instantiation of member function 'ft::avl_tree<int, int,
      ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<const int, int> >
      >::value_compare, std::__1::allocator<ft::pair<const int, int> > >::insert' requested here
                                        insert(*it);
                                        ^
includes/map.hpp:71:107: note: in instantiation of function template specialization 'ft::avl_tree<int,
      int, ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<const int, int> >
      >::value_compare, std::__1::allocator<ft::pair<const int, int> >
      >::avl_tree<std::__1::__map_iterator<std::__1::__tree_iterator<std::__1::__value_type<int, int>,
      std::__1::__tree_node<std::__1::__value_type<int, int>, void *> *, long> > >' requested here
  ...& comp = key_compare(), const allocator_type & alloc = allocator_type()):comp(comp), tree(first...
                                                                                          ^
srcs/tester/test_map.cpp:22:20: note: in instantiation of function template specialization 'ft::map<int,
      int, std::__1::less<int>, std::__1::allocator<ft::pair<const int, int> >
      >::map<std::__1::__map_iterator<std::__1::__tree_iterator<std::__1::__value_type<int, int>,
      std::__1::__tree_node<std::__1::__value_type<int, int>, void *> *, long> > >' requested here
        ft::map<int, int> mm(tm.begin(), tm.end(), tm.key_comp());
                          ^
includes/map.hpp:32:15: note: candidate function not viable: no known conversion from 'const int' to
      'const ft::map<int, int, std::__1::less<int>, std::__1::allocator<ft::pair<const int, int> >
      >::value_type' (aka 'const pair<const int, int>') for 1st argument
                                bool                            operator()(const value_type& x, ...
                                                                ^
2 errors generated.
make: *** [objs/test_map.o] Error 1